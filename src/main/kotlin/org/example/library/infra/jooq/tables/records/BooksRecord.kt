/*
 * This file is generated by jOOQ.
 */
package org.example.library.infra.jooq.tables.records

import org.example.library.infra.jooq.tables.Books
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.OffsetDateTime
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BooksRecord private constructor() : UpdatableRecordImpl<BooksRecord>(Books.BOOKS) {
    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var title: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var authorId: UUID
        set(value): Unit = set(2, value)
        get(): UUID = get(2) as UUID

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    open var updatedAt: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised BooksRecord
     */
    constructor(id: UUID, title: String, authorId: UUID, createdAt: OffsetDateTime?, updatedAt: OffsetDateTime?) : this() {
        this.id = id
        this.title = title
        this.authorId = authorId
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
